<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-04T08:48:29.753Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hibernate与JPA</title>
    <link href="http://example.com/2024/06/03/Hibernate%E4%B8%8EJPA/"/>
    <id>http://example.com/2024/06/03/Hibernate%E4%B8%8EJPA/</id>
    <published>2024-06-03T05:58:47.000Z</published>
    <updated>2024-06-04T08:48:29.753Z</updated>
    
    <content type="html"><![CDATA[<h1>JPA、Hibernate、MyBatis关系</h1><p>JPA是一套ORM规范，Hibernate实现了JPA规范！</p><p><img src="C:%5CUsers%5CDELL%5CDesktop%5CBoKe%5Csource%5Cimage%5CjpaImplementation_process.png" alt="实现过程" title="jpa实现过程"></p><h2 id="mybatis与hibernate比较">mybatis与hibernate比较</h2><p><strong>mybatis</strong>：小巧、方便？、高效、简单、直接、半自动</p><p>半自动的ORM框架  <em>甚至不属于ORM框架</em></p><p>小巧： mybatis就是jdbc封装</p><p>在国内更流行</p><p>场景： 在业务比较复杂系统进行使用</p><p><strong>hibernate</strong>：强大、方便、高效、（简单）复杂、绕弯子、全自动</p><p>全自动的ORM框架</p><p>强大：根据ORM映射生成不同SQL</p><p>在国外更流行</p><p>场景： 在业务相对简单的系统进行使用，随着<strong>微服务</strong>的流行，会更加流行</p><h1>Hibernate示例</h1><p>新建maven项目</p><h2 id="pom-xml依赖">pom.xml<em>依赖</em></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!-- hibernate对jpa的支持包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.4</span><span class="number">.32</span>.Final&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- Mysql and MariaDB --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">5.1</span><span class="number">.22</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">4.13</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="实体类">实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;cst_customer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Id</span>：声明主键的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@GeneratedValue</span>:配置主键的生成策略 strategy</span></span><br><span class="line"><span class="comment">     * GenerationType.IDENTITY ：自增，mysql</span></span><br><span class="line"><span class="comment">     * * 底层数据库必须支持自动增长（底层数据库支持的自动增长方式，对id自增）</span></span><br><span class="line"><span class="comment">     * GenerationType.SEQUENCE : 序列，oracle</span></span><br><span class="line"><span class="comment">     * * 底层数据库必须支持序列</span></span><br><span class="line"><span class="comment">     * GenerationType.TABLE : jpa提供的一种机制，通过一张数据库表的形式帮助我们完成主键自增</span></span><br><span class="line"><span class="comment">     * GenerationType.AUTO ： 由程序自动的帮助我们选择主键生成策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Column</span>:配置属性和字段的映射关系 name：数据库表中字段的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户的主键</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_address&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCustId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustId</span><span class="params">(Long custId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.custId = custId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCustName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustName</span><span class="params">(String custName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.custName = custName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCustAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustAddress</span><span class="params">(String custAddress)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.custAddress = custAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Customer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;custId=&quot;</span> + custId +</span><br><span class="line">                <span class="string">&quot;, custName=&#x27;&quot;</span> + custName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, custAddress=&#x27;&quot;</span> + custAddress + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hibernate-cfg-xml">hibernate.cfg.xml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">        <span class="string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">    &lt;session-factory&gt;</span><br><span class="line">        &lt;!-- 配置数据库连接信息 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;connection.driver_class&quot;</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;connection.url&quot;</span>&gt;jdbc:mysql:<span class="comment">//localhost:3306/springdata_jpa?characterEncoding=UTF-8&lt;/property&gt;</span></span><br><span class="line">        &lt;property name=<span class="string">&quot;connection.username&quot;</span>&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;connection.password&quot;</span>&gt;<span class="number">1234</span>&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 会在日志中记录sql 默认<span class="literal">false</span>--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;show_sql&quot;</span>&gt;<span class="literal">true</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--是否格式化sql 默认<span class="literal">false</span>--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;format_sql&quot;</span>&gt;<span class="literal">true</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--表生成策略</span><br><span class="line">            默认none   不自动生成</span><br><span class="line">            update    如果没有表会创建，有会检查更新</span><br><span class="line">            create    创建--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;hbm2ddl.auto&quot;</span>&gt;update&lt;/property&gt;</span><br><span class="line">        &lt;!-- 配置方言：选择数据库类型 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dialect&quot;</span>&gt;org.hibernate.dialect.MySQL57InnoDBDialect&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--指定哪些pojo 需要进行ORM映射--&gt;</span><br><span class="line">        &lt;mapping class=<span class="string">&quot;com.zhang.pojo.Customer&quot;</span>&gt;&lt;/mapping&gt;</span><br><span class="line">    &lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure><p><em>如果单独使用hibernate的API来进行持久化操作，则不能随意切换其他ORM框架</em></p><h2 id="测试-基于Hibernate持久化操作">测试(基于Hibernate持久化操作)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhang.pojo.Customer;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.MetadataSources;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistry;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HibernateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Session工厂  Session:数据库会话  代码和数据库的一个桥梁</span></span><br><span class="line">    <span class="keyword">private</span> SessionFactory sf;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StandardServiceRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardServiceRegistryBuilder</span>().configure(<span class="string">&quot;/hibernate.cfg.xml&quot;</span>).build();</span><br><span class="line">        <span class="comment">//2. 根据服务注册类创建一个元数据资源集，同时构建元数据并生成应用一般唯一的的session工厂</span></span><br><span class="line">        sf = <span class="keyword">new</span> <span class="title class_">MetadataSources</span>(registry).buildMetadata().buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//存储</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// session进行持久化操作</span></span><br><span class="line">        <span class="comment">//通过try进行自动关闭</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sf.openSession())&#123;<span class="comment">//创建Session</span></span><br><span class="line">            <span class="comment">//开始事务</span></span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">            <span class="comment">//创建消息实例</span></span><br><span class="line">            <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">            customer.setCustName(<span class="string">&quot;张嘉欣&quot;</span>);</span><br><span class="line">            <span class="comment">//保存消息</span></span><br><span class="line">            session.save(customer);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;<span class="comment">//关闭</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        session.close();</span></span><br><span class="line"><span class="comment">        sf.close();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testR</span><span class="params">()</span>&#123;<span class="comment">//查询</span></span><br><span class="line">        <span class="comment">// session进行持久化操作</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sf.openSession())&#123;</span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">            <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span>session.find(Customer.class, <span class="number">1L</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testR_lazy</span><span class="params">()</span>&#123;<span class="comment">//延迟查询</span></span><br><span class="line">        <span class="comment">// session进行持久化操作</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sf.openSession())&#123;</span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">            <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> session.load(Customer.class, <span class="number">1L</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testU</span><span class="params">()</span>&#123;<span class="comment">//更新</span></span><br><span class="line">        <span class="comment">// session进行持久化操作</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sf.openSession())&#123;</span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">            <span class="comment">//customer.setCustId(1L);</span></span><br><span class="line">            customer.setCustName(<span class="string">&quot;徐庶&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 插入session.save()</span></span><br><span class="line">            <span class="comment">// 更新session.update();</span></span><br><span class="line">            session.saveOrUpdate(customer);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testD</span><span class="params">()</span>&#123;<span class="comment">//删除</span></span><br><span class="line">        <span class="comment">// session进行持久化操作</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sf.openSession())&#123;</span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">            customer.setCustId(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">            session.remove(customer);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testR_HQL</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// session进行持久化操作</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sf.openSession())&#123;</span><br><span class="line">            <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            String hql=<span class="string">&quot; FROM Customer where custId=:id&quot;</span>;</span><br><span class="line"></span><br><span class="line">            List&lt;Customer&gt; resultList = session.createQuery(hql, Customer.class)</span><br><span class="line">                    .setParameter(<span class="string">&quot;id&quot;</span>,<span class="number">1L</span>)</span><br><span class="line">                    .getResultList();</span><br><span class="line">            System.out.println(resultList);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>JPA示例</h1><h2 id="添加META-INF-persistence-xml">添加META-INF\persistence.xml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;persistence xmlns=<span class="string">&quot;http://java.sun.com/xml/ns/persistence&quot;</span> version=<span class="string">&quot;2.0&quot;</span>&gt;</span><br><span class="line">    &lt;!--需要配置persistence-unit节点</span><br><span class="line">        持久化单元：</span><br><span class="line">            name：持久化单元名称</span><br><span class="line">            transaction-type：事务管理的方式</span><br><span class="line">                    JTA：分布式事务管理</span><br><span class="line">                    RESOURCE_LOCAL：本地事务管理</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;persistence-unit name=<span class="string">&quot;hibernateJPA&quot;</span> transaction-type=<span class="string">&quot;RESOURCE_LOCAL&quot;</span>&gt;</span><br><span class="line">        &lt;!--jpa的实现方式 --&gt;</span><br><span class="line">        &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;</span><br><span class="line">        &lt;!--需要进行ORM的POJO类--&gt;</span><br><span class="line">        &lt;class&gt;com.zhang.pojo.Customer&lt;/class&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--可选配置：配置jpa实现方的配置信息--&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;!-- 数据库信息</span><br><span class="line">                用户名，javax.persistence.jdbc.user</span><br><span class="line">                密码，  javax.persistence.jdbc.password</span><br><span class="line">                驱动，  javax.persistence.jdbc.driver</span><br><span class="line">                数据库地址   javax.persistence.jdbc.url</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;javax.persistence.jdbc.user&quot;</span> value=<span class="string">&quot;root&quot;</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;javax.persistence.jdbc.password&quot;</span> value=<span class="string">&quot;1234&quot;</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;javax.persistence.jdbc.driver&quot;</span> value=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;javax.persistence.jdbc.url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/springdata_jpa?characterEncoding=UTF-8&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!--配置jpa实现方(hibernate)的配置信息</span><br><span class="line">                显示sql           ：   <span class="literal">false</span>|<span class="literal">true</span></span><br><span class="line">                自动创建数据库表    ：  hibernate.hbm2ddl.auto</span><br><span class="line">                        create      : 程序运行时创建数据库表（如果有表，先删除表再创建）</span><br><span class="line">                        update      ：程序运行时创建表（如果有表，不会创建表）</span><br><span class="line">                        none        ：不会创建表</span><br><span class="line"></span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;hibernate.show_sql&quot;</span> value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span> value=<span class="string">&quot;update&quot;</span> /&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;hibernate.dialect&quot;</span> value=<span class="string">&quot;org.hibernate.dialect.MySQL5InnoDBDialect&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/persistence-unit&gt;</span><br><span class="line">&lt;/persistence&gt;</span><br></pre></td></tr></table></figure><h2 id="测试-基于JPA持久化操作">测试(基于JPA持久化操作)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhang.pojo.Customer;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaTest</span> &#123;</span><br><span class="line">    EntityManagerFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        来自与persistence.xml中的</span></span><br><span class="line"><span class="comment">        &lt;persistence-unit name=&quot;hibernateJPA&quot; transaction-type=&quot;RESOURCE_LOCAL&quot;&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        factory= Persistence.createEntityManagerFactory(<span class="string">&quot;hibernateJPA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//创建信息</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        customer.setCustName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//存储</span></span><br><span class="line">        em.persist(customer);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        em.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 立即查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testR</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line"></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> em.find(Customer.class, <span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">        em.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 延迟查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testR_lazy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line"></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> em.getReference(Customer.class, <span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">        em.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testU</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line"></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line"></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        customer.setCustId(<span class="number">5L</span>);</span><br><span class="line">        customer.setCustName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        // 如果指定了主键：</span></span><br><span class="line"><span class="comment">                  更新： 1.先查询  看是否有变化</span></span><br><span class="line"><span class="comment">                 如果有变化 更新     如果没有变化就不更新</span></span><br><span class="line"><span class="comment">        *   如果没有指定了主键：</span></span><br><span class="line"><span class="comment">        *          插入</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        em.merge(customer);</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">        em.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testU_JPQL</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line"></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line"></span><br><span class="line">        String jpql=<span class="string">&quot;UPDATE Customer set custName=:name where custId=:id&quot;</span>;<span class="comment">//以类为准</span></span><br><span class="line">        em.createQuery(jpql)</span><br><span class="line">                .setParameter(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;wangwu&quot;</span>)</span><br><span class="line">                .setParameter(<span class="string">&quot;id&quot;</span>,<span class="number">5L</span>)</span><br><span class="line">                .executeUpdate();</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">        em.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testU_SQL</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line"></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line"></span><br><span class="line">        String sql=<span class="string">&quot;UPDATE cst_customer  set cust_name = :name where cust_id = :id? &quot;</span>;</span><br><span class="line">        em.createNativeQuery(sql)</span><br><span class="line">                .setParameter(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;王五&quot;</span>)</span><br><span class="line">                .setParameter(<span class="string">&quot;id&quot;</span>,<span class="number">5L</span>)</span><br><span class="line">                .executeUpdate();</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">        em.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testD</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line"></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line"></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> em.find(Customer.class,<span class="number">5L</span>);</span><br><span class="line">        em.remove(customer);</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">        em.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>To my error</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testU_JPQL</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line"></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line"></span><br><span class="line">        String jpql=<span class="string">&quot;UPDATE Customer set custName=:name where custId=:id&quot;</span>;<span class="comment">//以类为准</span></span><br><span class="line">        em.createQuery(jpql)</span><br><span class="line">                .setParameter(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">                .setParameter(<span class="string">&quot;id&quot;</span>,<span class="number">5L</span>)</span><br><span class="line">                .executeUpdate();</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testU_SQL</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line"></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line"></span><br><span class="line">        String sql=<span class="string">&quot;UPDATE cst_customer set cust_name=:name where cust_id =:id&quot;</span>;</span><br><span class="line">        em.createNativeQuery(sql)</span><br><span class="line">                .setParameter(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;王五&quot;</span>)<span class="comment">//标红原因</span></span><br><span class="line">                .setParameter(<span class="string">&quot;id&quot;</span>,<span class="number">5L</span>)</span><br><span class="line">                .executeUpdate();</span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>Cannot resolve query parameter ‘name’</p><p>Cannot resolve query parameter ‘id’</p><p>经过不断的寻找更改，在sql中，cust_id=:id 改为 cust_id=:id?加‘?’，成功~</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;JPA、Hibernate、MyBatis关系&lt;/h1&gt;
&lt;p&gt;JPA是一套ORM规范，Hibernate实现了JPA规范！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:%5CUsers%5CDELL%5CDesktop%5CBoKe%5Csource%5Cimage%5Cjp</summary>
      
    
    
    
    
    <category term="Spring Data JPA" scheme="http://example.com/tags/Spring-Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>什么是JPA</title>
    <link href="http://example.com/2024/06/02/%E4%BB%80%E4%B9%88%E6%98%AFJPA/"/>
    <id>http://example.com/2024/06/02/%E4%BB%80%E4%B9%88%E6%98%AFJPA/</id>
    <published>2024-06-02T15:10:27.000Z</published>
    <updated>2024-06-03T04:26:48.471Z</updated>
    
    <content type="html"><![CDATA[<h1>JPA的介绍</h1><p>JPA全称Java Persistence API（2019年重新命名为 Jakarta Persistence API ），是Sun官方提出的一种ORM规范。</p><p><em><strong>O:Object R: Relational M:mapping</strong></em></p><p><strong>作用</strong></p><p>1.简化持久化操作的开发工作：让开发者从繁琐的 JDBC 和 SQL 代码中解脱出来，直接面向对象持久化操作。</p><p>2.Sun希望持久化技术能够统一，实现天下归一：如果你是基于JPA进行持久化你可以随意切换数据库。</p><p>该规范为我们提供了：</p><p>1）<strong>ORM映射元数据</strong>：JPA支持XML和注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中；</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span> 、 <span class="meta">@Table</span> 、<span class="meta">@Id</span> 与 <span class="meta">@Column</span>等注解。</span><br></pre></td></tr></table></figure><p>2）<strong>JPA 的API</strong>：用来操作实体对象，执行CRUD操作，框架在后台替我们完成所有的事情，开发者从繁琐的JDBC和SQL代码中解脱出来。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entityManager.merge(T t)；</span><br></pre></td></tr></table></figure><p>3）<strong>JPQL查询语言</strong>：通过面向对象而非面向数据库的查询语言查询数据，避免程序的SQL语句紧密耦合。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Student s <span class="keyword">where</span> s.name <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure><p><em>So: JPA仅仅是一种规范，也就是说JPA仅仅定义了一些接口，而接口是需要实现才能工作的</em>。</p><h1>JPA与JDBC的关系</h1><h2 id="相同处：">相同处：</h2><p>1.都跟数据库操作有关，JPA 是JDBC 的升华，升级版。</p><p>2.JDBC和JPA都是一组规范接口。（<em>JDBC与各种sql相接</em> ）</p><p>3.都是由SUN官方推出的。</p><h2 id="不同处：">不同处：</h2><p>1.JDBC是由各个关系型数据库实现的，JPA 是由<strong>ORM框架</strong>实现</p><p>2.JDBC 使用SQL语句和数据库通信。JPA用面向对象方式，通过ORM框架来生成SQL，进行操作。</p><p>3.JPA在JDBC之上的， JPA也要依赖JDBC才能操作数据库。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;JPA的介绍&lt;/h1&gt;
&lt;p&gt;JPA全称Java Persistence API（2019年重新命名为 Jakarta Persistence API ），是Sun官方提出的一种ORM规范。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;O:Object R: Relationa</summary>
      
    
    
    
    
    <category term="Spring Data JPA" scheme="http://example.com/tags/Spring-Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>SpringData</title>
    <link href="http://example.com/2024/06/02/SpringData/"/>
    <id>http://example.com/2024/06/02/SpringData/</id>
    <published>2024-06-02T14:38:22.000Z</published>
    <updated>2024-06-02T15:07:31.411Z</updated>
    
    <content type="html"><![CDATA[<h1>为什么要用SpringData?</h1><p>Spring Data 是现代Java应用开发中不可或缺的一部分，它通过提供一系列强大、易用的特性，极大地简化了数据访问层的开发工作，提高了开发效率和应用质量。无论是构建简单的Web应用还是复杂的微服务架构，Spring Data 都能成为得力的助手，使的更加专注于业务逻辑的实现，而非繁琐的数据访问细节。</p><h1>SpringData模块和特性介绍</h1><h2 id="SpringData主要模块及介绍">SpringData主要模块及介绍</h2><h3 id="1-Spring-Data-JPA">1 <strong>Spring Data JPA</strong></h3><p>这是Spring Data中最常用的模块之一，专门针对Java Persistence API (JPA)。它提供了一组Repository接口，用于执行CRUD操作、分页查询、排序及复杂查询。通过实体映射和方法命名约定，开发者几乎无需手写SQL就能完成数据库操作。</p><h3 id="2-Spring-Data-JDBC">2 <strong>Spring Data JDBC</strong></h3><p>针对那些偏好使用纯JDBC进行数据访问的开发者，Spring Data JDBC提供了一个轻量级的替代方案。它简化了JDBC代码，并支持实体映射和事务管理，使得开发者能够以面向对象的方式处理数据库交互。</p><h3 id="3-Spring-Data-MongoDB">3 <strong>Spring Data MongoDB</strong></h3><p>为NoSQL数据库MongoDB量身定制，此模块允许开发者使用与Spring Data JPA相似的Repository模式操作MongoDB集合。它支持复杂的查询、索引管理和数据转换等功能。</p><h3 id="4-Spring-Data-Redis">4 <strong>Spring Data Redis</strong></h3><p>专注于Redis缓存和数据存储，提供了一系列高级抽象，便于开发者执行Redis命令、管理键值对、执行事务和发布/订阅消息。</p><h3 id="5-Spring-Data-Elasticsearch">5 <strong>Spring Data Elasticsearch</strong></h3><p>针对Elasticsearch搜索引擎，这个模块帮助开发者轻松实现全文搜索、分析和索引管理等功能，通过Repository接口无缝集成到应用中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;为什么要用SpringData?&lt;/h1&gt;
&lt;p&gt;Spring Data 是现代Java应用开发中不可或缺的一部分，它通过提供一系列强大、易用的特性，极大地简化了数据访问层的开发工作，提高了开发效率和应用质量。无论是构建简单的Web应用还是复杂的微服务架构，Spring </summary>
      
    
    
    
    
    <category term="SpringData JPA铺垫" scheme="http://example.com/tags/SpringData-JPA%E9%93%BA%E5%9E%AB/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="http://example.com/2024/05/23/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2024/05/23/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2024-05-23T15:40:37.000Z</published>
    <updated>2024-05-23T16:31:39.259Z</updated>
    
    <content type="html"><![CDATA[<h1>1、git</h1><p>电脑中有已经安装好的git,并且环境配置ok;</p><h1>2、node.js</h1><p>下载node.js。</p><p><a href="https://nodejs.org/en/download/prebuilt-installer">下载地址</a></p><ul><li><p>node -v</p></li><li><p>npm -v</p></li></ul><p>判断是否在电脑上安装完成</p><h1>3、安装hexo</h1><ul><li><p>npm install -g hexo-cli</p></li><li><p>hexo -v （判断是否安装成功）</p></li></ul><p>创建文件，在文件目录下</p><ul><li>hexo init（文件必须为空）</li></ul><h1>4、使用hexo正式搭建博客</h1><ul><li>hexo s（成功）</li></ul><p>软遇到需要清缓存的情况</p><ul><li>npm cache verify</li></ul><h1>5、部署到远端</h1><ol><li><p>在github中创建仓库</p></li><li><p>将仓库的ssh部署到…/_config.yml</p></li><li><p>hexo cl</p></li><li><p>hexo g</p></li><li><p>hexo d</p></li></ol><blockquote><p>fatal: Could not read from remote repository</p><p>第一次使用github，密钥没有在本地配置</p><p><a href="https://blog.csdn.net/W_317/article/details/106518894">解决方法</a></p></blockquote><blockquote><p>Error: The landscape theme could not be found.&amp;&amp;GitHub创建个人主页报错404</p><p>本地主题出现错误</p><p>解决方法：更新或重安装的主题</p></blockquote><h1>6、marktext</h1><p>一个免费的markdown编译器</p><p><a href="https://github.com/chinayangxiaowei/marktext-chinese-language-pack/releases">marktext下载地址</a></p><p><strong>end</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1、git&lt;/h1&gt;
&lt;p&gt;电脑中有已经安装好的git,并且环境配置ok;&lt;/p&gt;
&lt;h1&gt;2、node.js&lt;/h1&gt;
&lt;p&gt;下载node.js。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/prebuilt-insta</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://example.com/2024/05/23/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2024/05/23/markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2024-05-23T13:52:12.000Z</published>
    <updated>2024-05-23T15:27:06.028Z</updated>
    
    <content type="html"><![CDATA[<h1>标题1</h1><h2 id="标题2">标题2</h2><h3 id="标题3">标题3</h3><hr><blockquote><p>引用的话</p></blockquote><hr><p>有序列表<br>1.张三<br>2.李四<br>3.王五</p><hr><p>无序列表</p><ul><li><p>无</p></li><li><p>顺序</p></li></ul><!----><ul><li><p>咧</p></li><li><p>表</p></li></ul><hr><p>任务列表</p><ul><li><p><input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0">吃饭</label></p></li><li><p><input type="checkbox" id="checkbox1"><label for="checkbox1">睡觉</label></p></li><li><p><input type="checkbox" id="checkbox2"><label for="checkbox2">打游戏</label></p></li></ul><hr><p>代码块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>数学公式</p><p>$$<br>\alpha \tag1<br>$$</p><hr><p>表格</p><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中</th></tr></thead><tbody><tr><td style="text-align:left">你</td><td style="text-align:right">我</td><td style="text-align:center">他</td></tr></tbody></table><hr><p>脚注<br>貂蝉<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><hr><p>链接<br><a href="https://www.bilibili.com" title="学习娱乐好b站">b站</a></p><hr><p>引用链接</p><p><a href="https://www.bilibili.com" title="学习娱乐好b站">b站</a>、<a href="https://www.bilibili.com" title="学习娱乐好b站">b站</a>、<a href="https://www.bilibili.com" title="学习娱乐好b站">b站</a></p><p>更改id处就ok了</p><hr><p>链接到标题<br>点一下到<a href="#%E6%A0%87%E9%A2%981">标题1</a></p><hr><p>看看<img src="https://markdown.com.cn/assets/img/shiprock.c3b9a023.jpg" alt="照片" title="好看吧"></p><p><em>斜体</em></p><p><strong>加粗</strong></p><p><code>print()//行内代码</code></p><p>ssssssssssss</p><p>表情 😄</p><p>行内数学公式$\tag1$</p><p>下标H<s>2</s>O</p><p>上标2<sup>2</sup>=4</p><p>我是高亮</p><hr><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>二技能免疫伤害，被动挺强，打不出伤害 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;标题1&lt;/h1&gt;
&lt;h2 id=&quot;标题2&quot;&gt;标题2&lt;/h2&gt;
&lt;h3 id=&quot;标题3&quot;&gt;标题3&lt;/h3&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;引用的话&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;有序列表&lt;br&gt;
1.张三&lt;br&gt;
2.李四&lt;br&gt;
3.王五</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初始博客尝试</title>
    <link href="http://example.com/2024/05/23/%E5%88%9D%E5%A7%8B%E5%8D%9A%E5%AE%A2%E5%B0%9D%E8%AF%95/"/>
    <id>http://example.com/2024/05/23/%E5%88%9D%E5%A7%8B%E5%8D%9A%E5%AE%A2%E5%B0%9D%E8%AF%95/</id>
    <published>2024-05-23T08:24:26.000Z</published>
    <updated>2024-05-23T08:25:50.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么样的">是什么样的</h2><hr><p>##拭目以待</p><hr><h2 id="markdown格式还要学习">markdown格式还要学习</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;是什么样的&quot;&gt;是什么样的&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;##拭目以待&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;markdown格式还要学习&quot;&gt;markdown格式还要学习&lt;/h2&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/05/23/hello-world/"/>
    <id>http://example.com/2024/05/23/hello-world/</id>
    <published>2024-05-23T08:15:16.150Z</published>
    <updated>1985-10-26T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
